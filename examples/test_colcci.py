#!/usr/bin/env python3
"""
Exemplo de teste para Colcci
Demonstra como testar o scraper com URLs da Colcci
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scraper import extrair_produto
import json

def test_colcci_single_product():
    """Testa extra√ß√£o de um produto da Colcci"""
    
    # URL de teste da Colcci
    url = "https://www.colcci.com.br/blusa-comfort-em-croche-360125377-p2450047?pp=/44.43458/&v=2450048"
    
    print("üß™ Testando extra√ß√£o de produto Colcci...")
    print(f"URL: {url}")
    print("-" * 50)
    
    try:
        # Extrair produto
        resultado = extrair_produto(url)
        
        # Verificar se retornou lista (m√∫ltiplos SKUs)
        if isinstance(resultado, list):
            print(f"‚úÖ Encontrados {len(resultado)} SKUs")
            
            # Mostrar dados do primeiro SKU
            primeiro_sku = resultado[0]
            print(f"\nüìã Dados do primeiro SKU:")
            print(f"   ID SKU: {primeiro_sku['_IDSKU']}")
            print(f"   Nome SKU: {primeiro_sku['_NomeSKU']}")
            print(f"   Nome Produto: {primeiro_sku['_NomeProduto']}")
            print(f"   Pre√ßo: {primeiro_sku['_Pre√ßo']}")
            print(f"   Categoria: {primeiro_sku['_NomeCategoria']}")
            print(f"   Marca: {primeiro_sku['_Marca']}")
            
            # Mostrar todos os SKUs
            print(f"\nüì¶ Todos os SKUs encontrados:")
            for i, sku in enumerate(resultado, 1):
                print(f"   {i}. {sku['_IDSKU']} - {sku['_NomeSKU']}")
            
            # Verificar se tem descri√ß√£o/composi√ß√£o
            descricao = primeiro_sku['_DescricaoProduto']
            if "POLIAMIDA" in descricao or "ELASTANO" in descricao:
                print(f"\n‚úÖ Composi√ß√£o detectada: {descricao[:100]}...")
            else:
                print(f"\n‚ö†Ô∏è Composi√ß√£o n√£o encontrada ou incompleta")
            
            # Verificar imagens
            imagens = primeiro_sku['_ImagensURLs']
            if imagens:
                print(f"\nüñºÔ∏è Imagens encontradas: {len(imagens.split(';'))} URLs")
            else:
                print(f"\n‚ö†Ô∏è Nenhuma imagem encontrada")
                
        else:
            print("‚ùå Erro: resultado n√£o √© uma lista")
            return False
            
        print(f"\n‚úÖ Teste conclu√≠do com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        return False

def test_colcci_multiple_products():
    """Testa extra√ß√£o de m√∫ltiplos produtos"""
    
    # URLs de teste
    urls = [
        "https://www.colcci.com.br/blusa-comfort-em-croche-360125377-p2450047?pp=/44.43458/&v=2450048",
        # Adicione mais URLs aqui para teste
    ]
    
    print("üß™ Testando m√∫ltiplos produtos...")
    print(f"URLs: {len(urls)}")
    print("-" * 50)
    
    total_skus = 0
    sucessos = 0
    
    for i, url in enumerate(urls, 1):
        print(f"\nüì¶ Produto {i}/{len(urls)}")
        try:
            resultado = extrair_produto(url)
            if isinstance(resultado, list):
                total_skus += len(resultado)
                sucessos += 1
                print(f"   ‚úÖ {len(resultado)} SKUs extra√≠dos")
            else:
                print(f"   ‚ùå Falha na extra√ß√£o")
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
    
    print(f"\nüìä Resumo:")
    print(f"   Produtos processados: {len(urls)}")
    print(f"   Sucessos: {sucessos}")
    print(f"   Total de SKUs: {total_skus}")
    
    return sucessos == len(urls)

if __name__ == "__main__":
    print("üöÄ Iniciando testes Colcci")
    print("=" * 50)
    
    # Teste 1: Produto √∫nico
    test1_ok = test_colcci_single_product()
    
    print("\n" + "=" * 50)
    
    # Teste 2: M√∫ltiplos produtos
    test2_ok = test_colcci_multiple_products()
    
    print("\n" + "=" * 50)
    print("üìã Resultado Final:")
    print(f"   Teste √∫nico: {'‚úÖ PASSOU' if test1_ok else '‚ùå FALHOU'}")
    print(f"   Teste m√∫ltiplo: {'‚úÖ PASSOU' if test2_ok else '‚ùå FALHOU'}")
    
    if test1_ok and test2_ok:
        print("\nüéâ Todos os testes passaram!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è Alguns testes falharam!")
        sys.exit(1)
